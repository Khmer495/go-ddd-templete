// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xXXU/cRhf+K6t530sLL00uIt81Ka3SSBBRol6gVTSsDzB07TEzY9IVWgl7pQhIUVHa",
	"gGiRSlMa0qDSXkQtbZPmxwwL4V9UM+P98gfhK63aG9aMZ87H85znnPE8qlIvoD74giNnHvHqNHhYPw4x",
	"Rpl6CBgNgAkCerlKXVC/8Cn2ghogB90ZvjU88vHw3aHR0ZFRZCFRD9QyF4z4U6hhIQ84x1OpU+/6pdD/",
	"xKf3/BIoT6VpzEu0Wg0ZA3cga6ZhIQazIWHgImfchNE1XbGQIEIbNnF3ztOJGagKFcYYYC+bjwu8ykgg",
	"CPX7AxSAvVLv25zMiJs9c5e4eVt97EGOA72csz3kwHR8RICnH/7PYBI56H92lzE7ocu+w4GpU4kZzBiu",
	"ZyDTcSX++vMyznow1FDlQKj9pEHTq6UhXxBRR1YK3jRCytWpEVKbCxAqzK0nCx1tJouGhThUQ0ZE/SMF",
	"n4nzOmBmctOYqgMTZqljYFqIADXUeeJPUrW17YjrgEs4IMhCc8C4wWVwoKzyogH46pWDrgyUB8oKIiym",
	"tVc7YHSS1HTaUyCy0Mrmumz+KJuPZPydbL6Qzd3W52utP9flQoy0ZYbVzpsuctAHIG4n5hQ4PKA+N8m9",
	"Uy4b6foCfO0FB0GNVPVZe4ab0jfFdLpSUyj0Rzpyqw9a5Ix3QR2vNCoW4qHnYVY/ISuFNZ7iilAOtUlU",
	"aVgoCE8Fy9GvT4+/vp/B5HbYh8lsCFxcp279THD0V3S7TLMFmS40U6R9PFzN5jJMSzeSSC4AYCf/FIAN",
	"C9mq0fCeEsuUzZjeoOqSYQ+E7jzjWcy/Uq7i/cNHPyOlAeSg2RBYva08BwWqFfcKU7AQrB4kE4SIL2BK",
	"l5GV9jLYcSOjWEbfyHhZRnsH+8vHG6vFjmvEI+KCnlurK62lFRntHG5vHj1/XOAp6UYZw50yqFxQe6fq",
	"97o/Z/v9BUUZ6VLaOthfeP1kR0Z7+aK09OAy2qQ8V5yJIUXcy83DxdWsLCnvFN3lqDI1xguHy8ljJGc6",
	"Vk6l68FL66+G2iyVNxhgAe45+Oyloc1kQmGnO9jz6uem2zBY1kDAycS2lpaPN7blQtxdjJ/ph2XZfHHw",
	"x/et7TUZPZDxkoz2ZPOZjH+S8VMZ/yabi+r41vPW6qKM9GLzB634h69ffSmjjbzR9p6OSFfMmI4TnbWz",
	"Wuhq+cqlkWTumDksvU/ZBHFd8M/Hk0E1zZOF6D0fmJFcf4vWLUpdJ7odSnQBekMz7O1ZBWO2G1rxgE3T",
	"8s/K+eJD+N9RKpmBXyhpe4YSHfBbq503jYF9PUzi1vKWUvm3n8novuoc0YaMdmS0a14d7i/K6NXZe0Nn",
	"lpgS/FAl+5+kvIuiPm53PhGL8H+ioftF/W2PgCIAk0+lt31Dzszav3u6Fn29nGO65qDbo0ZFjlKjtsfm",
	"2poLWS35knRsu0aruDZNuXCula+VbRwQe24QKT+JlSyl/XM0fni08bvW07q6KveFtHu89lgpJn5w+MXK",
	"wcvNrvLiWEZ7Xc3rS526Dif/68gblcZfAQAA//8iy0YGGxIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

