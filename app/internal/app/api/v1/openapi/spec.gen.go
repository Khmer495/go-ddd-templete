// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RXX2/cRBD/KtXAoxVfgIfKjy0SKkhQifAUndD2bpNsdP6T3XXEKbKU9UlVmiY0SmlD",
	"IKKhlCYQpfBQQUC0/TBbX5JvgWbXuX+2S2iS9uXss2d3Z37z+82MF6AR+lEY0EAK8BZANGaoT8ztBCU+",
	"XiMeRpRLRs3TJhUNziLJwgD/0q+IH7UoeCAp8b8cfOuAbEf4RkjOgmlIHGDNkjWsWWYaEJ+WGJvHJeax",
	"oNz4xyT1zc27nE6BB++4/QDdPDr3C0E5rsq3IZyTNiSJA5zOxYzTJniTYPzKzxuOyx5Wd0AyaVwzUPW2",
	"C2/M0obE/c05BQhHUcDtTo2CMS5HodL/AU+NRwVPEwcEbcScyfbnCJH18wol3PpvcMMFN+yj3gYzUkaQ",
	"4HoWTIUFfoDuPNadf3T6B/6qXd1ReNPZ1mol2/8229rVakMvqmGz3wbM9rI7aba8rdWmTm9rdRc3USta",
	"7Wi1qtPb0I9MGIQukYiBA/OUC+vB+FgNgQwjGuArD94fq43VwIGIyBkTphvxcIq1DM7TVOIFs0UwhGtN",
	"8OAjKq/nJoiwiMJAWITeq9Xw0ggDSQOzkkRRizXMWndWWI1Y1p2OkwjlMISffTKUH/Am+5mZrCd1B0Ts",
	"+4S3DdwburOvO/d0+pNBcC+7cz97voEwkWmBrBC0NQX1xIEoLgn1ejwU6lxMhbwSNtv/K8phtp9QuEjW",
	"URJaAg/B+0GRUp+Gl67mnpwBl8M/d4+/v1nEJXHAxUIjXsWGCWOAFOLEp9JUnski9b8znD7o3vsdUB/g",
	"wVxMeftElR5EZPoEZytayWPqDCCZI8QCSacNO5zRU8Z7x2iVavVAp8taPbFZrz64xXwmz3hytraa3VrV",
	"6Xr365+Pt/ePnv+g1U730dbh04cVp+ZVq3BIjxL1M8rrVLXf1Opi7T+j7vKC9fJg8ejxTkF0yCgrulCU",
	"qS4UPU6dj+hGunRlX3l1BylpfvVTyXb83KqizVYxO1c5JZI2XydFz7a6S2vF5PSU7y7g5VozsUC2qKTF",
	"lH1onpukTRhruLjalTue3Vo+3nxUyqrhOmS0h+2tLz3Z9/E/FD8oxqoWMRr222Xsm2wjeSoK3aOSQ+5s",
	"yExAF5ajvKKMNB+1aWakfHzqHixp9QIbw/bTbG0JR6x0V3d+MZ1j/ejFN2i/mIJTVZhssj/GWMrFfl7q",
	"tP6O9mVnEODeqF9dTPMp96IHmEKtfNPVsWpmfA38+wN4oUAi4Ii92YzPn1A45q38C8Bz3VbYIK2ZUEjv",
	"cu1yzSURc+fHAQ/JdymOR7/q1NAw/Ut3lnS6frj599GPK/hBoB4MfxDsHd9/aL8AundXXz7bQs6i5U2d",
	"plo96UvIkAVHlfx/bL/zFgYlBkk9+TcAAP//+xmlgfYOAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

