// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package openapi

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// プロフィール取得
	// (GET /profile)
	GetProfile(ctx echo.Context) error
	// プロフィール編集
	// (PUT /profile)
	PutProfile(ctx echo.Context) error
	// チーム一覧の取得
	// (GET /teams)
	GetTeams(ctx echo.Context, params GetTeamsParams) error
	// チームの作成
	// (POST /teams)
	PostTeams(ctx echo.Context) error
	// チームの削除
	// (DELETE /teams/{teamId})
	DeleteTeamsTeamId(ctx echo.Context, teamId string) error
	// チームの編集
	// (PUT /teams/{teamId})
	PutTeamsTeamId(ctx echo.Context, teamId string) error
	// チームへの参加
	// (POST /teams/{teamId}/join)
	PostTeamsTeamIdJoin(ctx echo.Context, teamId string) error
	// ユーザーの作成
	// (POST /users)
	PostUser(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetProfile converts echo context to params.
func (w *ServerInterfaceWrapper) GetProfile(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProfile(ctx)
	return err
}

// PutProfile converts echo context to params.
func (w *ServerInterfaceWrapper) PutProfile(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutProfile(ctx)
	return err
}

// GetTeams converts echo context to params.
func (w *ServerInterfaceWrapper) GetTeams(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTeamsParams
	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, true, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTeams(ctx, params)
	return err
}

// PostTeams converts echo context to params.
func (w *ServerInterfaceWrapper) PostTeams(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTeams(ctx)
	return err
}

// DeleteTeamsTeamId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTeamsTeamId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "teamId" -------------
	var teamId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "teamId", runtime.ParamLocationPath, ctx.Param("teamId"), &teamId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter teamId: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTeamsTeamId(ctx, teamId)
	return err
}

// PutTeamsTeamId converts echo context to params.
func (w *ServerInterfaceWrapper) PutTeamsTeamId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "teamId" -------------
	var teamId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "teamId", runtime.ParamLocationPath, ctx.Param("teamId"), &teamId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter teamId: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTeamsTeamId(ctx, teamId)
	return err
}

// PostTeamsTeamIdJoin converts echo context to params.
func (w *ServerInterfaceWrapper) PostTeamsTeamIdJoin(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "teamId" -------------
	var teamId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "teamId", runtime.ParamLocationPath, ctx.Param("teamId"), &teamId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter teamId: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTeamsTeamIdJoin(ctx, teamId)
	return err
}

// PostUser converts echo context to params.
func (w *ServerInterfaceWrapper) PostUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUser(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/profile", wrapper.GetProfile)
	router.PUT(baseURL+"/profile", wrapper.PutProfile)
	router.GET(baseURL+"/teams", wrapper.GetTeams)
	router.POST(baseURL+"/teams", wrapper.PostTeams)
	router.DELETE(baseURL+"/teams/:teamId", wrapper.DeleteTeamsTeamId)
	router.PUT(baseURL+"/teams/:teamId", wrapper.PutTeamsTeamId)
	router.POST(baseURL+"/teams/:teamId/join", wrapper.PostTeamsTeamIdJoin)
	router.POST(baseURL+"/users", wrapper.PostUser)

}

