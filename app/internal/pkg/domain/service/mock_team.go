// Code generated by MockGen. DO NOT EDIT.
// Source: team.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	entity "github.com/Khmer495/go-templete/internal/pkg/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockITeamService is a mock of ITeamService interface.
type MockITeamService struct {
	ctrl     *gomock.Controller
	recorder *MockITeamServiceMockRecorder
}

// MockITeamServiceMockRecorder is the mock recorder for MockITeamService.
type MockITeamServiceMockRecorder struct {
	mock *MockITeamService
}

// NewMockITeamService creates a new mock instance.
func NewMockITeamService(ctrl *gomock.Controller) *MockITeamService {
	mock := &MockITeamService{ctrl: ctrl}
	mock.recorder = &MockITeamServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITeamService) EXPECT() *MockITeamServiceMockRecorder {
	return m.recorder
}

// IsExist mocks base method.
func (m *MockITeamService) IsExist(ctx context.Context, teamId entity.Id) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExist", ctx, teamId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExist indicates an expected call of IsExist.
func (mr *MockITeamServiceMockRecorder) IsExist(ctx, teamId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExist", reflect.TypeOf((*MockITeamService)(nil).IsExist), ctx, teamId)
}
