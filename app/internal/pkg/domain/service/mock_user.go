// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	entity "github.com/Khmer495/go-templete/internal/pkg/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockIUserService is a mock of IUserService interface.
type MockIUserService struct {
	ctrl     *gomock.Controller
	recorder *MockIUserServiceMockRecorder
}

// MockIUserServiceMockRecorder is the mock recorder for MockIUserService.
type MockIUserServiceMockRecorder struct {
	mock *MockIUserService
}

// NewMockIUserService creates a new mock instance.
func NewMockIUserService(ctrl *gomock.Controller) *MockIUserService {
	mock := &MockIUserService{ctrl: ctrl}
	mock.recorder = &MockIUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserService) EXPECT() *MockIUserServiceMockRecorder {
	return m.recorder
}

// IsSelf mocks base method.
func (m *MockIUserService) IsSelf(ctx context.Context, userId entity.Id) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSelf", ctx, userId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSelf indicates an expected call of IsSelf.
func (mr *MockIUserServiceMockRecorder) IsSelf(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSelf", reflect.TypeOf((*MockIUserService)(nil).IsSelf), ctx, userId)
}

// SelfId mocks base method.
func (m *MockIUserService) SelfId(ctx context.Context) (entity.Id, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelfId", ctx)
	ret0, _ := ret[0].(entity.Id)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelfId indicates an expected call of SelfId.
func (mr *MockIUserServiceMockRecorder) SelfId(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelfId", reflect.TypeOf((*MockIUserService)(nil).SelfId), ctx)
}
