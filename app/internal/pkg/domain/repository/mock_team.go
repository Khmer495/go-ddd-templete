// Code generated by MockGen. DO NOT EDIT.
// Source: team.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	model "github.com/Khmer495/go-templete/internal/pkg/domain/model"
	gomock "github.com/golang/mock/gomock"
)

// MockITeamRepository is a mock of ITeamRepository interface.
type MockITeamRepository struct {
	ctrl     *gomock.Controller
	recorder *MockITeamRepositoryMockRecorder
}

// MockITeamRepositoryMockRecorder is the mock recorder for MockITeamRepository.
type MockITeamRepositoryMockRecorder struct {
	mock *MockITeamRepository
}

// NewMockITeamRepository creates a new mock instance.
func NewMockITeamRepository(ctrl *gomock.Controller) *MockITeamRepository {
	mock := &MockITeamRepository{ctrl: ctrl}
	mock.recorder = &MockITeamRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITeamRepository) EXPECT() *MockITeamRepositoryMockRecorder {
	return m.recorder
}

// Change mocks base method.
func (m *MockITeamRepository) Change(ctx context.Context, t model.Team) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Change", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// Change indicates an expected call of Change.
func (mr *MockITeamRepositoryMockRecorder) Change(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Change", reflect.TypeOf((*MockITeamRepository)(nil).Change), ctx, t)
}

// Create mocks base method.
func (m *MockITeamRepository) Create(ctx context.Context, t model.Team) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockITeamRepositoryMockRecorder) Create(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockITeamRepository)(nil).Create), ctx, t)
}

// Delete mocks base method.
func (m *MockITeamRepository) Delete(ctx context.Context, teamId model.Id) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, teamId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockITeamRepositoryMockRecorder) Delete(ctx, teamId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockITeamRepository)(nil).Delete), ctx, teamId)
}

// IsExist mocks base method.
func (m *MockITeamRepository) IsExist(ctx context.Context, teamId model.Id) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExist", ctx, teamId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExist indicates an expected call of IsExist.
func (mr *MockITeamRepositoryMockRecorder) IsExist(ctx, teamId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExist", reflect.TypeOf((*MockITeamRepository)(nil).IsExist), ctx, teamId)
}

// Join mocks base method.
func (m *MockITeamRepository) Join(ctx context.Context, teamId, userId model.Id) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Join", ctx, teamId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Join indicates an expected call of Join.
func (mr *MockITeamRepositoryMockRecorder) Join(ctx, teamId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockITeamRepository)(nil).Join), ctx, teamId, userId)
}

// List mocks base method.
func (m *MockITeamRepository) List(ctx context.Context, limit model.Limit, page model.Page) (model.Teams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, page)
	ret0, _ := ret[0].(model.Teams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockITeamRepositoryMockRecorder) List(ctx, limit, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockITeamRepository)(nil).List), ctx, limit, page)
}

// One mocks base method.
func (m *MockITeamRepository) One(ctx context.Context, teamId model.Id) (model.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, teamId)
	ret0, _ := ret[0].(model.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockITeamRepositoryMockRecorder) One(ctx, teamId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockITeamRepository)(nil).One), ctx, teamId)
}

// SearchByNamePrefix mocks base method.
func (m *MockITeamRepository) SearchByNamePrefix(ctx context.Context, limit model.Limit, page model.Page, un model.TeamName) (model.Teams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByNamePrefix", ctx, limit, page, un)
	ret0, _ := ret[0].(model.Teams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByNamePrefix indicates an expected call of SearchByNamePrefix.
func (mr *MockITeamRepositoryMockRecorder) SearchByNamePrefix(ctx, limit, page, un interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByNamePrefix", reflect.TypeOf((*MockITeamRepository)(nil).SearchByNamePrefix), ctx, limit, page, un)
}
