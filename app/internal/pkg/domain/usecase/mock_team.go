// Code generated by MockGen. DO NOT EDIT.
// Source: team.go

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"

	model "github.com/Khmer495/go-templete/internal/pkg/domain/model"
	gomock "github.com/golang/mock/gomock"
)

// MockITeamUsecase is a mock of ITeamUsecase interface.
type MockITeamUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockITeamUsecaseMockRecorder
}

// MockITeamUsecaseMockRecorder is the mock recorder for MockITeamUsecase.
type MockITeamUsecaseMockRecorder struct {
	mock *MockITeamUsecase
}

// NewMockITeamUsecase creates a new mock instance.
func NewMockITeamUsecase(ctrl *gomock.Controller) *MockITeamUsecase {
	mock := &MockITeamUsecase{ctrl: ctrl}
	mock.recorder = &MockITeamUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITeamUsecase) EXPECT() *MockITeamUsecaseMockRecorder {
	return m.recorder
}

// Change mocks base method.
func (m *MockITeamUsecase) Change(ctx context.Context, teamdId string, pName, pDescription *string) (model.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Change", ctx, teamdId, pName, pDescription)
	ret0, _ := ret[0].(model.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Change indicates an expected call of Change.
func (mr *MockITeamUsecaseMockRecorder) Change(ctx, teamdId, pName, pDescription interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Change", reflect.TypeOf((*MockITeamUsecase)(nil).Change), ctx, teamdId, pName, pDescription)
}

// Create mocks base method.
func (m *MockITeamUsecase) Create(ctx context.Context, name, description string) (model.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, name, description)
	ret0, _ := ret[0].(model.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockITeamUsecaseMockRecorder) Create(ctx, name, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockITeamUsecase)(nil).Create), ctx, name, description)
}

// Delete mocks base method.
func (m *MockITeamUsecase) Delete(ctx context.Context, teamId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, teamId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockITeamUsecaseMockRecorder) Delete(ctx, teamId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockITeamUsecase)(nil).Delete), ctx, teamId)
}

// GetList mocks base method.
func (m *MockITeamUsecase) GetList(ctx context.Context, limit, page int, pName *string) (model.Teams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", ctx, limit, page, pName)
	ret0, _ := ret[0].(model.Teams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockITeamUsecaseMockRecorder) GetList(ctx, limit, page, pName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockITeamUsecase)(nil).GetList), ctx, limit, page, pName)
}

// Join mocks base method.
func (m *MockITeamUsecase) Join(ctx context.Context, teamId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Join", ctx, teamId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Join indicates an expected call of Join.
func (mr *MockITeamUsecaseMockRecorder) Join(ctx, teamId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockITeamUsecase)(nil).Join), ctx, teamId)
}
