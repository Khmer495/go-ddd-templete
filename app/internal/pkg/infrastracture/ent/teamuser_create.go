// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Khmer495/go-templete/internal/pkg/infrastracture/ent/team"
	"github.com/Khmer495/go-templete/internal/pkg/infrastracture/ent/teamuser"
	"github.com/Khmer495/go-templete/internal/pkg/infrastracture/ent/user"
)

// TeamUserCreate is the builder for creating a TeamUser model.
type TeamUserCreate struct {
	config
	mutation *TeamUserMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (tuc *TeamUserCreate) SetCreatedAt(t time.Time) *TeamUserCreate {
	tuc.mutation.SetCreatedAt(t)
	return tuc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuc *TeamUserCreate) SetNillableCreatedAt(t *time.Time) *TeamUserCreate {
	if t != nil {
		tuc.SetCreatedAt(*t)
	}
	return tuc
}

// SetDeletedAt sets the "deleted_at" field.
func (tuc *TeamUserCreate) SetDeletedAt(t time.Time) *TeamUserCreate {
	tuc.mutation.SetDeletedAt(t)
	return tuc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tuc *TeamUserCreate) SetNillableDeletedAt(t *time.Time) *TeamUserCreate {
	if t != nil {
		tuc.SetDeletedAt(*t)
	}
	return tuc
}

// SetTeamID sets the "team_id" field.
func (tuc *TeamUserCreate) SetTeamID(i int) *TeamUserCreate {
	tuc.mutation.SetTeamID(i)
	return tuc
}

// SetUserID sets the "user_id" field.
func (tuc *TeamUserCreate) SetUserID(i int) *TeamUserCreate {
	tuc.mutation.SetUserID(i)
	return tuc
}

// SetTeam sets the "team" edge to the Team model.
func (tuc *TeamUserCreate) SetTeam(t *Team) *TeamUserCreate {
	return tuc.SetTeamID(t.ID)
}

// SetUser sets the "user" edge to the User model.
func (tuc *TeamUserCreate) SetUser(u *User) *TeamUserCreate {
	return tuc.SetUserID(u.ID)
}

// Mutation returns the TeamUserMutation object of the builder.
func (tuc *TeamUserCreate) Mutation() *TeamUserMutation {
	return tuc.mutation
}

// Save creates the TeamUser in the database.
func (tuc *TeamUserCreate) Save(ctx context.Context) (*TeamUser, error) {
	var (
		err  error
		node *TeamUser
	)
	tuc.defaults()
	if len(tuc.hooks) == 0 {
		if err = tuc.check(); err != nil {
			return nil, err
		}
		node, err = tuc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TeamUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tuc.check(); err != nil {
				return nil, err
			}
			tuc.mutation = mutation
			node, err = tuc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuc.hooks) - 1; i >= 0; i-- {
			mut = tuc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tuc *TeamUserCreate) SaveX(ctx context.Context) *TeamUser {
	v, err := tuc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (tuc *TeamUserCreate) defaults() {
	if _, ok := tuc.mutation.CreatedAt(); !ok {
		v := teamuser.DefaultCreatedAt()
		tuc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuc *TeamUserCreate) check() error {
	if _, ok := tuc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := tuc.mutation.TeamID(); !ok {
		return &ValidationError{Name: "team_id", err: errors.New("ent: missing required field \"team_id\"")}
	}
	if _, ok := tuc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New("ent: missing required field \"user_id\"")}
	}
	if _, ok := tuc.mutation.TeamID(); !ok {
		return &ValidationError{Name: "team", err: errors.New("ent: missing required edge \"team\"")}
	}
	if _, ok := tuc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New("ent: missing required edge \"user\"")}
	}
	return nil
}

func (tuc *TeamUserCreate) sqlSave(ctx context.Context) (*TeamUser, error) {
	_node, _spec := tuc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tuc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tuc *TeamUserCreate) createSpec() (*TeamUser, *sqlgraph.CreateSpec) {
	var (
		_node = &TeamUser{config: tuc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: teamuser.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: teamuser.FieldID,
			},
		}
	)
	if value, ok := tuc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: teamuser.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := tuc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: teamuser.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if nodes := tuc.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   teamuser.TeamTable,
			Columns: []string{teamuser.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: team.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TeamID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tuc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   teamuser.UserTable,
			Columns: []string{teamuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TeamUserCreateBulk is the builder for creating many TeamUser entities in bulk.
type TeamUserCreateBulk struct {
	config
	builders []*TeamUserCreate
}

// Save creates the TeamUser entities in the database.
func (tucb *TeamUserCreateBulk) Save(ctx context.Context) ([]*TeamUser, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tucb.builders))
	nodes := make([]*TeamUser, len(tucb.builders))
	mutators := make([]Mutator, len(tucb.builders))
	for i := range tucb.builders {
		func(i int, root context.Context) {
			builder := tucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TeamUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tucb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tucb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tucb *TeamUserCreateBulk) SaveX(ctx context.Context) []*TeamUser {
	v, err := tucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
