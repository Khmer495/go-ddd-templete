// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Khmer495/go-templete/internal/pkg/infrastracture/ent/predicate"
	"github.com/Khmer495/go-templete/internal/pkg/infrastracture/ent/team"
	"github.com/Khmer495/go-templete/internal/pkg/infrastracture/ent/teamuser"
	"github.com/Khmer495/go-templete/internal/pkg/infrastracture/ent/user"
)

// TeamUserUpdate is the builder for updating TeamUser entities.
type TeamUserUpdate struct {
	config
	hooks    []Hook
	mutation *TeamUserMutation
}

// Where adds a new predicate for the TeamUserUpdate builder.
func (tuu *TeamUserUpdate) Where(ps ...predicate.TeamUser) *TeamUserUpdate {
	tuu.mutation.predicates = append(tuu.mutation.predicates, ps...)
	return tuu
}

// SetDeletedAt sets the "deleted_at" field.
func (tuu *TeamUserUpdate) SetDeletedAt(t time.Time) *TeamUserUpdate {
	tuu.mutation.SetDeletedAt(t)
	return tuu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tuu *TeamUserUpdate) SetNillableDeletedAt(t *time.Time) *TeamUserUpdate {
	if t != nil {
		tuu.SetDeletedAt(*t)
	}
	return tuu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tuu *TeamUserUpdate) ClearDeletedAt() *TeamUserUpdate {
	tuu.mutation.ClearDeletedAt()
	return tuu
}

// SetTeamID sets the "team_id" field.
func (tuu *TeamUserUpdate) SetTeamID(i int) *TeamUserUpdate {
	tuu.mutation.ResetTeamID()
	tuu.mutation.SetTeamID(i)
	return tuu
}

// SetUserID sets the "user_id" field.
func (tuu *TeamUserUpdate) SetUserID(i int) *TeamUserUpdate {
	tuu.mutation.ResetUserID()
	tuu.mutation.SetUserID(i)
	return tuu
}

// SetTeam sets the "team" edge to the Team entity.
func (tuu *TeamUserUpdate) SetTeam(t *Team) *TeamUserUpdate {
	return tuu.SetTeamID(t.ID)
}

// SetUser sets the "user" edge to the User entity.
func (tuu *TeamUserUpdate) SetUser(u *User) *TeamUserUpdate {
	return tuu.SetUserID(u.ID)
}

// Mutation returns the TeamUserMutation object of the builder.
func (tuu *TeamUserUpdate) Mutation() *TeamUserMutation {
	return tuu.mutation
}

// ClearTeam clears the "team" edge to the Team entity.
func (tuu *TeamUserUpdate) ClearTeam() *TeamUserUpdate {
	tuu.mutation.ClearTeam()
	return tuu
}

// ClearUser clears the "user" edge to the User entity.
func (tuu *TeamUserUpdate) ClearUser() *TeamUserUpdate {
	tuu.mutation.ClearUser()
	return tuu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tuu *TeamUserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tuu.hooks) == 0 {
		if err = tuu.check(); err != nil {
			return 0, err
		}
		affected, err = tuu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TeamUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tuu.check(); err != nil {
				return 0, err
			}
			tuu.mutation = mutation
			affected, err = tuu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tuu.hooks) - 1; i >= 0; i-- {
			mut = tuu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuu *TeamUserUpdate) SaveX(ctx context.Context) int {
	affected, err := tuu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tuu *TeamUserUpdate) Exec(ctx context.Context) error {
	_, err := tuu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuu *TeamUserUpdate) ExecX(ctx context.Context) {
	if err := tuu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuu *TeamUserUpdate) check() error {
	if _, ok := tuu.mutation.TeamID(); tuu.mutation.TeamCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"team\"")
	}
	if _, ok := tuu.mutation.UserID(); tuu.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	return nil
}

func (tuu *TeamUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   teamuser.Table,
			Columns: teamuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: teamuser.FieldID,
			},
		},
	}
	if ps := tuu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: teamuser.FieldDeletedAt,
		})
	}
	if tuu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: teamuser.FieldDeletedAt,
		})
	}
	if tuu.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   teamuser.TeamTable,
			Columns: []string{teamuser.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: team.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuu.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   teamuser.TeamTable,
			Columns: []string{teamuser.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: team.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   teamuser.UserTable,
			Columns: []string{teamuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   teamuser.UserTable,
			Columns: []string{teamuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tuu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{teamuser.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TeamUserUpdateOne is the builder for updating a single TeamUser entity.
type TeamUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TeamUserMutation
}

// SetDeletedAt sets the "deleted_at" field.
func (tuuo *TeamUserUpdateOne) SetDeletedAt(t time.Time) *TeamUserUpdateOne {
	tuuo.mutation.SetDeletedAt(t)
	return tuuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tuuo *TeamUserUpdateOne) SetNillableDeletedAt(t *time.Time) *TeamUserUpdateOne {
	if t != nil {
		tuuo.SetDeletedAt(*t)
	}
	return tuuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tuuo *TeamUserUpdateOne) ClearDeletedAt() *TeamUserUpdateOne {
	tuuo.mutation.ClearDeletedAt()
	return tuuo
}

// SetTeamID sets the "team_id" field.
func (tuuo *TeamUserUpdateOne) SetTeamID(i int) *TeamUserUpdateOne {
	tuuo.mutation.ResetTeamID()
	tuuo.mutation.SetTeamID(i)
	return tuuo
}

// SetUserID sets the "user_id" field.
func (tuuo *TeamUserUpdateOne) SetUserID(i int) *TeamUserUpdateOne {
	tuuo.mutation.ResetUserID()
	tuuo.mutation.SetUserID(i)
	return tuuo
}

// SetTeam sets the "team" edge to the Team entity.
func (tuuo *TeamUserUpdateOne) SetTeam(t *Team) *TeamUserUpdateOne {
	return tuuo.SetTeamID(t.ID)
}

// SetUser sets the "user" edge to the User entity.
func (tuuo *TeamUserUpdateOne) SetUser(u *User) *TeamUserUpdateOne {
	return tuuo.SetUserID(u.ID)
}

// Mutation returns the TeamUserMutation object of the builder.
func (tuuo *TeamUserUpdateOne) Mutation() *TeamUserMutation {
	return tuuo.mutation
}

// ClearTeam clears the "team" edge to the Team entity.
func (tuuo *TeamUserUpdateOne) ClearTeam() *TeamUserUpdateOne {
	tuuo.mutation.ClearTeam()
	return tuuo
}

// ClearUser clears the "user" edge to the User entity.
func (tuuo *TeamUserUpdateOne) ClearUser() *TeamUserUpdateOne {
	tuuo.mutation.ClearUser()
	return tuuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuuo *TeamUserUpdateOne) Select(field string, fields ...string) *TeamUserUpdateOne {
	tuuo.fields = append([]string{field}, fields...)
	return tuuo
}

// Save executes the query and returns the updated TeamUser entity.
func (tuuo *TeamUserUpdateOne) Save(ctx context.Context) (*TeamUser, error) {
	var (
		err  error
		node *TeamUser
	)
	if len(tuuo.hooks) == 0 {
		if err = tuuo.check(); err != nil {
			return nil, err
		}
		node, err = tuuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TeamUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tuuo.check(); err != nil {
				return nil, err
			}
			tuuo.mutation = mutation
			node, err = tuuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuuo.hooks) - 1; i >= 0; i-- {
			mut = tuuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuuo *TeamUserUpdateOne) SaveX(ctx context.Context) *TeamUser {
	node, err := tuuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuuo *TeamUserUpdateOne) Exec(ctx context.Context) error {
	_, err := tuuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuuo *TeamUserUpdateOne) ExecX(ctx context.Context) {
	if err := tuuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuuo *TeamUserUpdateOne) check() error {
	if _, ok := tuuo.mutation.TeamID(); tuuo.mutation.TeamCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"team\"")
	}
	if _, ok := tuuo.mutation.UserID(); tuuo.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	return nil
}

func (tuuo *TeamUserUpdateOne) sqlSave(ctx context.Context) (_node *TeamUser, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   teamuser.Table,
			Columns: teamuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: teamuser.FieldID,
			},
		},
	}
	id, ok := tuuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TeamUser.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tuuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, teamuser.FieldID)
		for _, f := range fields {
			if !teamuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != teamuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: teamuser.FieldDeletedAt,
		})
	}
	if tuuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: teamuser.FieldDeletedAt,
		})
	}
	if tuuo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   teamuser.TeamTable,
			Columns: []string{teamuser.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: team.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuuo.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   teamuser.TeamTable,
			Columns: []string{teamuser.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: team.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   teamuser.UserTable,
			Columns: []string{teamuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   teamuser.UserTable,
			Columns: []string{teamuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TeamUser{config: tuuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{teamuser.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
