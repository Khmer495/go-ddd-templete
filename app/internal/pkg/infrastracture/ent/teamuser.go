// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Khmer495/go-templete/internal/pkg/infrastracture/ent/team"
	"github.com/Khmer495/go-templete/internal/pkg/infrastracture/ent/teamuser"
	"github.com/Khmer495/go-templete/internal/pkg/infrastracture/ent/user"
)

// TeamUser is the model model for the TeamUser schema.
type TeamUser struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// TeamID holds the value of the "team_id" field.
	TeamID int `json:"team_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TeamUserQuery when eager-loading is set.
	Edges TeamUserEdges `json:"edges"`
}

// TeamUserEdges holds the relations/edges for other nodes in the graph.
type TeamUserEdges struct {
	// Team holds the value of the team edge.
	Team *Team `json:"team,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TeamOrErr returns the Team value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TeamUserEdges) TeamOrErr() (*Team, error) {
	if e.loadedTypes[0] {
		if e.Team == nil {
			// The edge team was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: team.Label}
		}
		return e.Team, nil
	}
	return nil, &NotLoadedError{edge: "team"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TeamUserEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TeamUser) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case teamuser.FieldID, teamuser.FieldTeamID, teamuser.FieldUserID:
			values[i] = new(sql.NullInt64)
		case teamuser.FieldCreatedAt, teamuser.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TeamUser", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TeamUser fields.
func (tu *TeamUser) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case teamuser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tu.ID = int(value.Int64)
		case teamuser.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tu.CreatedAt = value.Time
			}
		case teamuser.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				tu.DeletedAt = new(time.Time)
				*tu.DeletedAt = value.Time
			}
		case teamuser.FieldTeamID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field team_id", values[i])
			} else if value.Valid {
				tu.TeamID = int(value.Int64)
			}
		case teamuser.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				tu.UserID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryTeam queries the "team" edge of the TeamUser model.
func (tu *TeamUser) QueryTeam() *TeamQuery {
	return (&TeamUserClient{config: tu.config}).QueryTeam(tu)
}

// QueryUser queries the "user" edge of the TeamUser model.
func (tu *TeamUser) QueryUser() *UserQuery {
	return (&TeamUserClient{config: tu.config}).QueryUser(tu)
}

// Update returns a builder for updating this TeamUser.
// Note that you need to call TeamUser.Unwrap() before calling this method if this TeamUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (tu *TeamUser) Update() *TeamUserUpdateOne {
	return (&TeamUserClient{config: tu.config}).UpdateOne(tu)
}

// Unwrap unwraps the TeamUser model that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tu *TeamUser) Unwrap() *TeamUser {
	tx, ok := tu.config.driver.(*txDriver)
	if !ok {
		panic("ent: TeamUser is not a transactional model")
	}
	tu.config.driver = tx.drv
	return tu
}

// String implements the fmt.Stringer.
func (tu *TeamUser) String() string {
	var builder strings.Builder
	builder.WriteString("TeamUser(")
	builder.WriteString(fmt.Sprintf("id=%v", tu.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(tu.CreatedAt.Format(time.ANSIC))
	if v := tu.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", team_id=")
	builder.WriteString(fmt.Sprintf("%v", tu.TeamID))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", tu.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// TeamUsers is a parsable slice of TeamUser.
type TeamUsers []*TeamUser

func (tu TeamUsers) config(cfg config) {
	for _i := range tu {
		tu[_i].config = cfg
	}
}
