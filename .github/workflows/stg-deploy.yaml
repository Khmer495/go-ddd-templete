on:
  push:
    branches:
      - main
    paths:
      - app/build/**
      - app/cmd/**
      - app/internal/**
      - app/go.mod
      - app/go.sum

  workflow_dispatch:
    inputs:
      target:
        description: "Deploy Target ( api-v1 | batch-hoge )"
        required: true

env:
  ENV: stg
  GO_VERSION: 1.17.5
  GO_DIR: app
  AWS_EC2_METADATA_DISABLED: true

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      is-api-v1-changed: ${{ steps.is_changed.outputs.api-v1 }}
      is-batch-hoge-changed: ${{ steps.is_changed.outputs.batch-hoge}}
    steps:
      - name: Check out
        uses: actions/checkout@v2

      - name: Check changed apps
        uses: dorny/paths-filter@v2
        id: is_changed
        with:
          base: main
          filters: |
            api-v1:
              - app/build/api/**
              - app/cmd/api/v1/**
              - app/internal/app/api/v1/**
              - app/internal/pkg/**
              - app/go.mod
              - app/go.sum
            batch-hoge:
              - app/cmd/batch/batch-hoge/**
              - app/internal/app/batch/batch-hoge/**
              - app/internal/pkg/**
              - app/go.mod
              - app/go.sum

      - name: Set up Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Go get
        working-directory: ${{ env.GO_DIR }}
        run: go get -v -t -d ./...

  lint:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v2

      - name: Set up Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Lint
        uses: golangci/golangci-lint-action@v2
        with:
          # Required: the version of golangci-lint is required and must be specified without patch version: we always use the latest patch version.
          version: v1.29

          # Optional: working directory, useful for monorepos
          working-directory: ${{ env.GO_DIR }}

          # Optional: golangci-lint command line arguments.
          args: --timeout=10m

          # Optional: show only new issues if it's a pull request. The default value is `false`.
          # only-new-issues: true

          # Optional: if set to true then the action will use pre-installed Go.
          skip-go-installation: true

          # Optional: if set to true then the action don't cache or restore ~/go/pkg.
          skip-pkg-cache: true

  test:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v2

      - name: Set up Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Test
        working-directory: ${{ env.GO_DIR }}
        run: go test ./... -v

  deploy-api-v1:
    needs: [setup, lint, test]
    if: ${{ needs.setup.outputs.is-api-v1-changed == 'true' || github.event.inputs.target == 'api-v1' }}
    runs-on: ubuntu-latest
    env:
      APP: api
      VER: v1
    steps:
      - name: Check out
        uses: actions/checkout@v2

      - name: Set up Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build
        working-directory: ${{ env.GO_DIR }}
        run: GOARCH=amd64 GOOS=linux go build cmd/${{ env.APP }}/${{ env.VER }}/main.go

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: AWS CodePipeline Execution
        run: aws codepipeline start-pipeline-execution --name ${{ env.ENV }}-${{ env.APP }}

  deploy-batch-hoge:
    needs: [setup, lint, test]
    if: ${{ needs.setup.outputs.is-batch-hoge-changed == 'true' || github.event.inputs.target == 'batch-hoge' }}
    runs-on: ubuntu-latest
    env:
      APP: hoge
      DATETIME: $(TZ=Asia/Tokyo date '+%Y%m%d_%H%M%S')
    steps:
      - name: Check out
        uses: actions/checkout@v2

      - name: Set up Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build
        working-directory: ${{ env.GO_DIR }}
        run: GOARCH=amd64 GOOS=linux go build cmd/batch/${{ env.APP }}/lambda/main.go

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Copy some_file from s3
        run: aws s3 cp s3://${{ env.ENV }}/some_file some_file

      - name: Make zip for lambda
        # zipコマンドの対象ファイルが複数のとき、一部存在しないファイルがあってもエラーにならないので、ファイルチェックを行う
        run: |
          if [[ ! -f app/main ]]; then
            exit 1
          fi
          if [[ ! -f some_file ]]; then
            exit 1
          fi
          zip -j lambda.zip app/main some_file

      - name: Deploy to lambda and upload to s3
        run: |
          version=`aws lambda update-function-code --function-name ${{ env.ENV }}-batch-${{ env.APP }} --zip-file fileb://lambda.zip --publish | jq -r ".Version"`
          aws s3 cp lambda.zip s3://${{ env.ENV }}/src/lambda/${{ env.APP }}/v${version}_${{ env.DATETIME }}_${GITHUB_SHA}.zip
